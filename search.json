[{"title":"Hello World","url":"/2024/08/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"快速学会使用django","url":"/2024/08/06/%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8django/","content":"下面是从零开始开发 Django 项目的完整步骤，包括环境设置、项目配置、Django REST framework (DRF) 的准备工作，以及跨域资源共享 (CORS) 的配置：\n\n环境设置\n 1.创建虚拟环境\n\n\n使用 Python 的虚拟环境工具隔离项目的依赖：\npython -m venv venvsource venv&#x2F;bin&#x2F;activate  # 在 Windows 上使用 venv\\Scripts\\activate\n2.安装 Django 和 Django REST framework\n\n安装 Django 和 Django REST framework（DRF）：\npip install django djangorestframework\n3.安装 CORS 支持库\n\n安装 django-cors-headers 库以支持跨域资源共享 (CORS)：\npip install django-cors-headers\n4.保存依赖项\n\n将依赖项保存到 requirements.txt 文件中，方便后续管理和部署：\npip freeze &gt; requirements.txt\n\n项目配置\n 1.创建 Django 项目\n\n\n使用 Django 的命令行工具创建新的项目：\ndjango-admin startproject myproject\n2.创建 Django 应用\n\n在项目目录下创建应用（例如 myapp）：\ncd myprojectpython manage.py startapp myapp\n3.配置项目设置\n•\t在 settings.py 中添加应用和 DRF\n\nINSTALLED_APPS &#x3D; [    …    ‘rest_framework’,    ‘myapp’,    ‘corsheaders’,  # 添加 CORS 支持]\n3.\t\n•\t配置中间件以启用 CORS\n\n在 settings.py 中的 MIDDLEWARE 列表中添加 corsheaders.middleware.CorsMiddleware：\nMIDDLEWARE &#x3D; [    …    ‘corsheaders.middleware.CorsMiddleware’,    ‘django.middleware.common.CommonMiddleware’,    …]\n3.\t\n•\t配置 CORS 设置\n\n在 settings.py 中添加 CORS 配置：\nCORS_ALLOWED_ORIGINS &#x3D; [    “http://localhost:3000“,  # 你的前端应用 URL    “https://yourfrontenddomain.com“,  # 生产环境中的前端 URL]\n3.\t\n•\t设置数据库（默认是 SQLite，可以根据需要修改）：\n\nDATABASES &#x3D; {    ‘default’: {        ‘ENGINE’: ‘django.db.backends.sqlite3’,        ‘NAME’: BASE_DIR &#x2F; ‘db.sqlite3’,    }}\n3.\t\n•\t配置静态文件（如有必要）：&#39;DIRS&#39;: [Path(BASE_DIR, &#39;templates&#39;)],\n\nSTATIC_URL &#x3D; ‘&#x2F;static&#x2F;‘STATICFILES_DIRS&#x3D;[BASE_DIR,’static’]#或者STATICFILES_DIRS &#x3D; [os.path.join(BASE_DIR, ‘static’)]\nSTATIC_ROOT&#x3D;Path(BASE_DIR,’static’)#(开发环境不需要，上一行和这一行不能指定为同一个目录)在生产环境时，运行python manage.py collectstatic,django会将所有静态文件拷贝到Static目录中。3.\t\n•\t配置媒体文件（如果需要上传文件）：\n\nMEDIA_URL &#x3D; ‘&#x2F;media&#x2F;‘MEDIA_ROOT &#x3D; Path(BASE_DIR, ‘media’)\n3.\t\n•\t设置语言和时区（根据需要）：\n\nLANGUAGE_CODE &#x3D; ‘en-us’TIME_ZONE &#x3D; ‘UTC’USE_I18N &#x3D; TrueUSE_L10N &#x3D; TrueUSE_TZ &#x3D; True\n\n准备 Django REST framework\n\n   配置 DRF\n\n\n\n在 settings.py 中添加 DRF 的配置（如果有特定需求）：\nREST_FRAMEWORK &#x3D; {    ‘DEFAULT_RENDERER_CLASSES’: (        ‘rest_framework.renderers.JSONRenderer’,    ),    ‘DEFAULT_PARSER_CLASSES’: (        ‘rest_framework.parsers.JSONParser’,    ),}\n2.创建模型\n\n在 myapp&#x2F;models.py 中定义数据模型：\nfrom django.db import models\nclass Word(models.Model):    head_word &#x3D; models.CharField(max_length&#x3D;100)    data &#x3D; models.JSONField()\n3.创建序列化器\n\n在 myapp&#x2F;serializers.py 中定义序列化器：\nfrom rest_framework import serializersfrom .models import Word\nclass WordSerializer(serializers.ModelSerializer):    class Meta:        model &#x3D; Word        fields &#x3D; ‘all‘\n4.创建视图集\n\n在 myapp&#x2F;views.py 中定义视图集：\nfrom rest_framework import viewsetsfrom .models import Wordfrom .serializers import WordSerializer\nclass WordViewSet(viewsets.ModelViewSet):    queryset &#x3D; Word.objects.all()    serializer_class &#x3D; WordSerializer\n5.配置 URL 路由\n•在 myapp/urls.py 中配置应用的 URL 路由：\n\nfrom django.urls import path, includefrom rest_framework.routers import DefaultRouterfrom .views import WordViewSet\nrouter &#x3D; DefaultRouter()router.register(r’words’, WordViewSet)\nurlpatterns &#x3D; [    path(‘’, include(router.urls)),]\n这个配置将为 Word 模型提供以下 API 端点：\n•\tGET /words/：获取所有 Word 对象的列表。\n•\tGET /words/&#123;id&#125;/：获取特定 Word 对象的详细信息。\n•\tPOST /words/：创建一个新的 Word 对象。\n•\tPUT /words/&#123;id&#125;/：更新特定 Word 对象的全部字段。\n•\tPATCH /words/&#123;id&#125;/：部分更新特定 Word 对象的字段。\n•\tDELETE /words/&#123;id&#125;/：删除特定 Word 对象。\n5.\t\n•在项目的 myproject/urls.py 中包含应用的 URL 路由：\n\nfrom django.contrib import adminfrom django.urls import path, include\nurlpatterns &#x3D; [    path(‘admin&#x2F;‘, admin.site.urls),    path(‘api&#x2F;‘, include(‘myapp.urls’)),]\n\n数据库初始化和开发\n 1.创建数据库表\n\n\n执行迁移命令以创建数据库结构：\npython manage.py makemigrationspython manage.py migrate\n2.创建超级用户\n\n创建一个超级用户来访问 Django 管理后台：\npython manage.py createsuperuser\n3.启动开发服务器\n\n启动 Django 开发服务器进行本地开发和测试：\npython manage.py runserver\n通过这些步骤，你可以设置一个 Django 项目，启用 Django REST framework 进行 API 开发，并配置跨域资源共享 (CORS) 以允许来自不同源的请求。这将帮助你构建一个功能全面、跨域兼容的应用程序。\nDjango admin后台配置的常用配置#app&#x2F;admin.pyfrom django.contrib import adminfrom django.db.models.functions import Lowerfrom .models import Word\nRegister your models here.class WordModelAdmin(admin.ModelAdmin):    list_display &#x3D; (‘head_word’,’trans_pos’,’trans_desc’)    list_editable &#x3D; [‘trans_desc’]    readonly_fields &#x3D; [‘head_word’]    search_fields &#x3D; [‘head_word’]    list_filter &#x3D; [‘trans_pos’]#在admin设置排序，只影响admin界面的显示    ordering &#x3D; (‘head_word’,)    list_per_page &#x3D; 5    #若不想默认区分大小写排序，可在模型中的Meta类中修改或者在模型中指定排序#Meta下定义排序将会影响所有通过模型生成的查询集的默认排序    class Meta:        Ordering &#x3D; [Lower(‘head_word’)]admin.site.register(Word,WordModelAdmin)\n关于json,记住两个常用函数json.loads 和 json.dumps 是 Python 的 json 模块中的两个核心函数，用于处理 JSON 数据。它们有不同的用途：json.loads•功能：将 JSON 格式的字符串解析为 Python 对象（如字典、列表）。•用法：import jsonjson_string &#x3D; ‘{“name”: “John”, “age”: 30, “city”: “New York”}’data &#x3D; json.loads(json_string)print(data)\n输出: {‘name’: ‘John’, ‘age’: 30, ‘city’: ‘New York’}•参数：•s：要解析的 JSON 格式字符串。•还可以使用其他参数来控制解析过程，如 object_hook、parse_float、parse_int、parse_constant 和 object_pairs_hook。\njson.dumps•功能：将 Python 对象转换为 JSON 格式的字符串。•用法：import jsondata &#x3D; {‘name’: ‘John’, ‘age’: 30, ‘city’: ‘New York’}json_string &#x3D; json.dumps(data, indent&#x3D;4, ensure_ascii&#x3D;False)print(json_string)\n输出:{“name”: “John”,“age”: 30,“city”: “New York”}•参数：•obj：要转换为 JSON 的 Python 对象。•indent：用于缩进格式化输出，使 JSON 更易读。•ensure_ascii：如果为 False，则允许输出非 ASCII 字符（如中文）。•还可以使用其他参数来控制转换过程，如 separators、default 和 sort_keys。限流设置：#限流设置 settings.py全局设置限流访问‘DEFAULT_THROTTLE_CLASSES’: [        ‘rest_framework.throttling.AnonRateThrottle’,        ‘rest_framework.throttling.UserRateThrottle’,\n],\n&#39;DEFAULT_THROTTLE_RATES&#39;: &#123;\n    &#39;anon&#39;: &#39;2/min&#39;,\n    &#39;user&#39;: &#39;10/min&#39;\n&#125;\n\n如果你是匿名用户，当你的每分钟请求数量累计达到2次时，你将看到如下返回信息。如果你是认证用户，你的每分钟请求数量达到10次时才会被限流。局部设置限流\nREST_FRAMEWORK &#x3D; {    ‘DEFAULT_THROTTLE_CLASSES’: [        ‘rest_framework.throttling.AnonRateThrottle’,        ‘rest_framework.throttling.UserRateThrottle’,    ],    ‘DEFAULT_THROTTLE_RATES’: {        ‘anon’: ‘2&#x2F;min’,        ‘user’: ‘10&#x2F;min’,        ‘limit_per_minute’:’5&#x2F;min’, # 新增        ‘limit_per_hour’: ‘500&#x2F;hour’, # 新增    }}\nScopeRateThrottle类AnonRateThrottle和UserRateThrottle类都是针对单个用户请求进行限流的，而ScopeRateThrottle类是针对不同API接口资源进行限流的，限制的是所有用户对接口的访问总数之和。使用时直接在视图类里通过throttle_scope 属性指定限流范围(scope), 然后在settings.py对不同scope设置限流频率。例子如下所示：class ArticleListView(APIView):    throttle_scope &#x3D; ‘article_list’\nclass ArticleDetailView(APIView):    throttle_scope &#x3D; ‘article_detail’针对不同api接口设置不同限流频率。如下配置代表文章资源列表一天限1000次请求(所有用户访问数量之和)，文章详情接口限1小时100次。REST_FRAMEWORK &#x3D; {    ‘DEFAULT_THROTTLE_CLASSES’: [        ‘rest_framework.throttling.AnonRateThrottle’,        ‘rest_framework.throttling.UserRateThrottle’,        ‘rest_framework.throttling.ScopedRateThrottle’,    ],    ‘DEFAULT_THROTTLE_RATES’: {        ‘anon’: ‘2&#x2F;min’,        ‘user’: ‘10&#x2F;min’,        ‘article_list’:’1000&#x2F;day’, # 新增        ‘article_detail’: ‘100&#x2F;hour’, # 新增    }}\n其他•json.loads 用于将 JSON 格式的字符串转换为 Python 对象。•json.dumps 用于将 Python 对象转换为 JSON 格式的字符串。这些函数在处理 JSON 数据时非常有用，能够帮助你在 Python 程序中轻松地进行数据交换和存储。Django项目目录结构\n","categories":["Django"],"tags":["django","python"]}]